{
  "address": "0xb68093bb89f26a807626f5757db7246D6d2c6d59",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tag",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_msgHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "addTagstoProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_projectDescription",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_tags",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "createProject",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProjects",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "registeredBy",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "projectName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectDescription",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tags",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "ipfsURI",
              "type": "string"
            }
          ],
          "internalType": "struct Structs.Project[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "getProjectById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "registeredBy",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "projectName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "projectDescription",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "tags",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "ipfsURI",
              "type": "string"
            }
          ],
          "internalType": "struct Structs.Project",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "registeredBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "projectDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_homeTown",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_msgHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hometown",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xee2056186e93cdec2f6721d53b534a8a555cc81430bc58cacc2cd71fe5cda816",
  "receipt": {
    "to": null,
    "from": "0x2EDe36F69960aaa38316F12b633df77176cADe38",
    "contractAddress": "0xb68093bb89f26a807626f5757db7246D6d2c6d59",
    "transactionIndex": 0,
    "gasUsed": "2638716",
    "logsBloom": "0x
    "blockHash": "0x9e1e346c9f5d6073120858ff5aeb24f8acf273bd2a9575d56557b9e3026f7b10",
    "transactionHash": "0xee2056186e93cdec2f6721d53b534a8a555cc81430bc58cacc2cd71fe5cda816",
    "logs": [],
    "blockNumber": 4058526,
    "cumulativeGasUsed": "2638716",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "7a1719511cb5a7323e31c0c248c66cc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"addTagstoProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectDescription\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProjects\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectDescription\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"ipfsURI\",\"type\":\"string\"}],\"internalType\":\"struct Structs.Project[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getProjectById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectDescription\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"ipfsURI\",\"type\":\"string\"}],\"internalType\":\"struct Structs.Project\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_homeTown\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hometown\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EBF.sol\":\"EBF\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/EBF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\ncontract EBF is ERC1155, Storage {\\n\\tuint256 private projectCounter = 0;\\n\\n\\tconstructor() ERC1155(\\\"EBF\\\") {\\n\\t\\tdeployer = msg.sender;\\n\\t}\\n\\n\\t// receive() external payable {}\\n\\n\\tfunction registerUser(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _homeTown,\\n\\t\\tbytes32 _msgHash,\\n\\t\\tbytes memory _signature\\n\\t) public {\\n\\t\\trequire(!isRegistered[msg.sender], \\\"Player is already registered.\\\");\\n\\t\\trequire(isVerified(_msgHash, _signature), \\\"Invalid Txn Source\\\");\\n\\n\\t\\t// Set user info\\n\\t\\tusers[msg.sender] = Structs.User({\\n\\t\\t\\tisVerified: true,\\n\\t\\t\\tname: _name,\\n\\t\\t\\thometown: _homeTown\\n\\t\\t});\\n\\n\\t\\tisRegistered[msg.sender] = true;\\n\\t}\\n\\n\\tfunction createProject(\\n\\t\\tstring memory _projectName,\\n\\t\\tstring memory _projectDescription,\\n\\t\\tstring[] memory _tags,\\n\\t\\tstring memory _uri\\n\\t) public payable {\\n\\t\\trequire(\\n\\t\\t\\tisRegistered[msg.sender],\\n\\t\\t\\t\\\"Only registered users can creat project\\\"\\n\\t\\t);\\n\\n\\t\\t// Check if the user has enough resources, if we want users to pay for creating projects\\n\\n\\t\\t// Proceed with creating the project\\n\\t\\tprojects[projectCounter] = Structs.Project({\\n\\t\\t\\tid: projectCounter,\\n\\t\\t\\tregisteredBy: msg.sender,\\n\\t\\t\\tprojectName: _projectName,\\n\\t\\t\\tprojectDescription: _projectDescription,\\n\\t\\t\\ttags: _tags,\\n\\t\\t\\tipfsURI: _uri\\n\\t\\t});\\n\\n\\t\\t_mint(msg.sender, projectCounter, 1000, \\\"\\\");\\n\\t\\ttokenURIs[projectCounter] = _uri;\\n\\t\\t++projectCounter;\\n\\t}\\n\\n\\tfunction addTagstoProject(\\n\\t\\tuint256 _projectId,\\n\\t\\tstring memory _tag,\\n\\t\\tbytes32 _msgHash,\\n\\t\\tbytes memory _signature\\n\\t) public {\\n\\t\\trequire(isRegistered[msg.sender], \\\"Only registered users can add tags\\\");\\n\\t\\trequire(isVerified(_msgHash, _signature), \\\"Invalid Txn Source\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\tprojects[_projectId].tags.length <= 6,\\n\\t\\t\\t\\\"Maximum of 6 tags are allowed per project.\\\"\\n\\t\\t);\\n\\t\\tprojects[_projectId].tags.push(_tag);\\n\\t}\\n\\n\\tfunction getAllProjects() public view returns (Structs.Project[] memory) {\\n\\t\\tif (projectCounter == 0) {\\n\\t\\t\\treturn new Structs.Project[](0);\\n\\t\\t}\\n\\n\\t\\tStructs.Project[] memory allProjects = new Structs.Project[](\\n\\t\\t\\tprojectCounter\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < projectCounter; i++) {\\n\\t\\t\\tallProjects[i] = projects[i];\\n\\t\\t}\\n\\n\\t\\treturn allProjects;\\n\\t}\\n\\n\\t// Function to get a project by its ID, including all its tags\\n\\tfunction getProjectById(\\n\\t\\tuint256 projectId\\n\\t) public view returns (Structs.Project memory, string[] memory) {\\n\\t\\tStructs.Project memory project = projects[projectId];\\n\\t\\treturn (project, project.tags);\\n\\t}\\n\\n\\tfunction isVerified(\\n\\t\\tbytes32 _messageHash,\\n\\t\\tbytes memory _signature\\n\\t) public view returns (bool) {\\n\\t\\t// The ethSignedMessageHash is the hash that the signer actually signed\\n\\t\\tbytes32 ethSignedMessageHash = getEthSignedMessageHash(_messageHash);\\n\\n\\t\\t// Recover the signer's address from the signature\\n\\t\\taddress signer = recoverSigner(ethSignedMessageHash, _signature);\\n\\n\\t\\trequire(signer == deployer, \\\"Unauthorized Contract call\\\");\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction getEthSignedMessageHash(\\n\\t\\tbytes32 _messageHash\\n\\t) public pure returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n\\t\\t\\t\\t\\t_messageHash\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction recoverSigner(\\n\\t\\tbytes32 _ethSignedMessageHash,\\n\\t\\tbytes memory _signature\\n\\t) public pure returns (address) {\\n\\t\\t(uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\\n\\t\\treturn ecrecover(_ethSignedMessageHash, v, r, s);\\n\\t}\\n\\n\\tfunction splitSignature(\\n\\t\\tbytes memory sig\\n\\t) public pure returns (uint8, bytes32, bytes32) {\\n\\t\\trequire(sig.length == 65, \\\"invalid signature length\\\");\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\tuint8 v;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// first 32 bytes, after the length prefix\\n\\t\\t\\tr := mload(add(sig, 32))\\n\\t\\t\\t// second 32 bytes\\n\\t\\t\\ts := mload(add(sig, 64))\\n\\t\\t\\t// final byte (first byte of the next 32 bytes)\\n\\t\\t\\tv := byte(0, mload(add(sig, 96)))\\n\\t\\t}\\n\\t\\treturn (v, r, s);\\n\\t}\\n}\\n\",\"keccak256\":\"0x05aa4bee8e0fc968cf7aff177498fd16853aee87aa6f29f9b98341508a2201fe\",\"license\":\"MIT\"},\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract Storage {\\n\\taddress deployer;\\n\\n\\tmapping(uint256 => string) public tokenURIs;\\n\\n\\tmapping(address => Structs.User) public users;\\n\\tmapping(address => bool) public isRegistered;\\n\\tmapping(uint256 projectId => Structs.Project) public projects;\\n}\\n\",\"keccak256\":\"0xa4461e07dea13ca447863a00b1f2af65b397864dda2783c551d3ab01b32d6202\",\"license\":\"MIT\"},\"contracts/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Structs {\\n\\tstruct User {\\n\\t\\tbool isVerified;\\n\\t\\tstring name;\\n\\t\\tstring hometown;\\n\\t}\\n\\n\\tstruct Project {\\n\\t\\tuint256 id;\\n\\t\\taddress registeredBy;\\n\\t\\tstring projectName;\\n\\t\\tstring projectDescription;\\n\\t\\tstring[] tags;\\n\\t\\tstring ipfsURI;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1efd235d5779753548b9a5d86b32dae2e1ef76fb39042641155cb79471b17c54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006008553480156200001657600080fd5b5060408051808201909152600381526222a12360e91b60208201526200003c8162000055565b50600380546001600160a01b03191633179055620001d8565b60026200006382826200010c565b5050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200009257607f821691505b602082108103620000b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200010757600081815260208120601f850160051c81016020861015620000e25750805b601f850160051c820191505b818110156200010357828155600101620000ee565b5050505b505050565b81516001600160401b0381111562000128576200012862000067565b62000140816200013984546200007d565b84620000b9565b602080601f8311600181146200017857600084156200015f5750858301515b600019600386901b1c1916600185901b17855562000103565b600085815260208120601f198616915b82811015620001a95788860151825594840194600190910190840162000188565b5085821015620001c85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612dcc80620001e86000396000f3fe6080604052600436106101295760003560e01c806380d03829116100ab578063bee5cdca1161006f578063bee5cdca14610399578063bf60db3b146103c7578063c3c5a547146103e7578063e985e9c514610417578063f242432a14610460578063fa5408011461048057600080fd5b806380d03829146102b157806397aba7f9146102d3578063a22cb4651461030b578063a7bb58031461032b578063a87430ba1461036a57600080fd5b8063401eaf73116100f2578063401eaf7314610211578063414aea43146102315780634e1273f4146102445780636c8b703f146102715780637fcacc0e1461029157600080fd5b8062fdd58e1461012e57806301ffc9a7146101615780630e89341c14610191578063107046bd146101be5780632eb2c2d6146101ef575b600080fd5b34801561013a57600080fd5b5061014e610149366004612064565b6104a0565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c3660046120a4565b610539565b6040519015158152602001610158565b34801561019d57600080fd5b506101b16101ac3660046120c8565b610589565b6040516101589190612127565b3480156101ca57600080fd5b506101de6101d93660046120c8565b61061d565b60405161015895949392919061213a565b3480156101fb57600080fd5b5061020f61020a3660046122df565b6107ee565b005b34801561021d57600080fd5b5061020f61022c366004612388565b61083a565b61020f61023f366004612419565b610969565b34801561025057600080fd5b5061026461025f366004612525565b610af3565b604051610158919061262a565b34801561027d57600080fd5b506101b161028c3660046120c8565b610c1c565b34801561029d57600080fd5b506101816102ac36600461263d565b610cb6565b3480156102bd57600080fd5b506102c6610d3b565b6040516101589190612755565b3480156102df57600080fd5b506102f36102ee36600461263d565b6110e2565b6040516001600160a01b039091168152602001610158565b34801561031757600080fd5b5061020f6103263660046127b7565b611161565b34801561033757600080fd5b5061034b6103463660046127f3565b611170565b6040805160ff9094168452602084019290925290820152606001610158565b34801561037657600080fd5b5061038a61038536600461282f565b6111e2565b6040516101589392919061284a565b3480156103a557600080fd5b506103b96103b43660046120c8565b611319565b604051610158929190612881565b3480156103d357600080fd5b5061020f6103e23660046128a6565b6115fb565b3480156103f357600080fd5b5061018161040236600461282f565b60066020526000908152604090205460ff1681565b34801561042357600080fd5b506101816104323660046128da565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561046c57600080fd5b5061020f61047b36600461290d565b611750565b34801561048c57600080fd5b5061014e61049b3660046120c8565b611795565b60006001600160a01b0383166105105760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061056a57506001600160e01b031982166303a24d0760e21b145b8061053357506301ffc9a760e01b6001600160e01b0319831614610533565b60606002805461059890612971565b80601f01602080910402602001604051908101604052809291908181526020018280546105c490612971565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b50505050509050919050565b60076020526000908152604090208054600182015460028301805492936001600160a01b039092169261064f90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461067b90612971565b80156106c85780601f1061069d576101008083540402835291602001916106c8565b820191906000526020600020905b8154815290600101906020018083116106ab57829003601f168201915b5050505050908060030180546106dd90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461070990612971565b80156107565780601f1061072b57610100808354040283529160200191610756565b820191906000526020600020905b81548152906001019060200180831161073957829003601f168201915b50505050509080600501805461076b90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461079790612971565b80156107e45780601f106107b9576101008083540402835291602001916107e4565b820191906000526020600020905b8154815290600101906020018083116107c757829003601f168201915b5050505050905085565b6001600160a01b03851633148061080a575061080a8533610432565b6108265760405162461bcd60e51b8152600401610507906129a5565b61083385858585856117e8565b5050505050565b3360009081526006602052604090205460ff161561089a5760405162461bcd60e51b815260206004820152601d60248201527f506c6179657220697320616c726561647920726567697374657265642e0000006044820152606401610507565b6108a48282610cb6565b6108e55760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642054786e20536f7572636560701b6044820152606401610507565b604080516060810182526001808252602080830188815283850188905233600090815260059092529390208251815460ff19169015151781559251919291908201906109319082612a3e565b50604082015160028201906109469082612a3e565b5050336000908152600660205260409020805460ff191660011790555050505050565b3360009081526006602052604090205460ff166109d85760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920726567697374657265642075736572732063616e206372656174206044820152661c1c9bda9958dd60ca1b6064820152608401610507565b6040805160c081018252600854808252336020808401918252838501898152606085018990526080850188905260a0850187905260009384526007909152939091208251815590516001820180546001600160a01b0319166001600160a01b0390921691909117905591519091906002820190610a559082612a3e565b5060608201516003820190610a6a9082612a3e565b5060808201518051610a86916004840191602090910190611f44565b5060a08201516005820190610a9b9082612a3e565b50905050610abe336008546103e8604051806020016040528060008152506119c5565b6008546000908152600460205260409020610ad98282612a3e565b50600860008154610ae990612b13565b9091555050505050565b60608151835114610b585760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610507565b600083516001600160401b03811115610b7357610b73612196565b604051908082528060200260200182016040528015610b9c578160200160208202803683370190505b50905060005b8451811015610c1457610be7858281518110610bc057610bc0612b2c565b6020026020010151858381518110610bda57610bda612b2c565b60200260200101516104a0565b828281518110610bf957610bf9612b2c565b6020908102919091010152610c0d81612b13565b9050610ba2565b509392505050565b60046020526000908152604090208054610c3590612971565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6190612971565b8015610cae5780601f10610c8357610100808354040283529160200191610cae565b820191906000526020600020905b815481529060010190602001808311610c9157829003601f168201915b505050505081565b600080610cc284611795565b90506000610cd082856110e2565b6003549091506001600160a01b03808316911614610d305760405162461bcd60e51b815260206004820152601a60248201527f556e617574686f72697a656420436f6e74726163742063616c6c0000000000006044820152606401610507565b506001949350505050565b6060600854600003610d7e576040805160008082526020820190925290610d78565b610d65611f9a565b815260200190600190039081610d5d5790505b50905090565b60006008546001600160401b03811115610d9a57610d9a612196565b604051908082528060200260200182016040528015610dd357816020015b610dc0611f9a565b815260200190600190039081610db85790505b50905060005b6008548110156110dc57600081815260076020908152604091829020825160c0810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191610e2d90612971565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5990612971565b8015610ea65780601f10610e7b57610100808354040283529160200191610ea6565b820191906000526020600020905b815481529060010190602001808311610e8957829003601f168201915b50505050508152602001600382018054610ebf90612971565b80601f0160208091040260200160405190810160405280929190818152602001828054610eeb90612971565b8015610f385780601f10610f0d57610100808354040283529160200191610f38565b820191906000526020600020905b815481529060010190602001808311610f1b57829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611012578382906000526020600020018054610f8590612971565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb190612971565b8015610ffe5780601f10610fd357610100808354040283529160200191610ffe565b820191906000526020600020905b815481529060010190602001808311610fe157829003601f168201915b505050505081526020019060010190610f66565b50505050815260200160058201805461102a90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461105690612971565b80156110a35780601f10611078576101008083540402835291602001916110a3565b820191906000526020600020905b81548152906001019060200180831161108657829003601f168201915b5050505050815250508282815181106110be576110be612b2c565b602002602001018190525080806110d490612b13565b915050610dd9565b50919050565b6000806000806110f185611170565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa15801561114c573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b61116c338383611ad9565b5050565b600080600083516041146111c65760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610507565b5050506020810151604082015160609092015160001a92909190565b6005602052600090815260409020805460018201805460ff909216929161120890612971565b80601f016020809104026020016040519081016040528092919081815260200182805461123490612971565b80156112815780601f1061125657610100808354040283529160200191611281565b820191906000526020600020905b81548152906001019060200180831161126457829003601f168201915b50505050509080600201805461129690612971565b80601f01602080910402602001604051908101604052809291908181526020018280546112c290612971565b801561130f5780601f106112e45761010080835404028352916020019161130f565b820191906000526020600020905b8154815290600101906020018083116112f257829003601f168201915b5050505050905083565b611321611f9a565b6000828152600760209081526040808320815160c0810183528154815260018201546001600160a01b03169381019390935260028101805460609594938401919061136b90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461139790612971565b80156113e45780601f106113b9576101008083540402835291602001916113e4565b820191906000526020600020905b8154815290600101906020018083116113c757829003601f168201915b505050505081526020016003820180546113fd90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461142990612971565b80156114765780601f1061144b57610100808354040283529160200191611476565b820191906000526020600020905b81548152906001019060200180831161145957829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156115505783829060005260206000200180546114c390612971565b80601f01602080910402602001604051908101604052809291908181526020018280546114ef90612971565b801561153c5780601f106115115761010080835404028352916020019161153c565b820191906000526020600020905b81548152906001019060200180831161151f57829003601f168201915b5050505050815260200190600101906114a4565b50505050815260200160058201805461156890612971565b80601f016020809104026020016040519081016040528092919081815260200182805461159490612971565b80156115e15780601f106115b6576101008083540402835291602001916115e1565b820191906000526020600020905b8154815290600101906020018083116115c457829003601f168201915b505050919092525050506080810151909590945092505050565b3360009081526006602052604090205460ff166116655760405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920726567697374657265642075736572732063616e20616464207461604482015261677360f01b6064820152608401610507565b61166f8282610cb6565b6116b05760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642054786e20536f7572636560701b6044820152606401610507565b600084815260076020526040902060040154600610156117255760405162461bcd60e51b815260206004820152602a60248201527f4d6178696d756d206f66203620746167732061726520616c6c6f7765642070656044820152693910383937b532b1ba1760b11b6064820152608401610507565b6000848152600760209081526040822060040180546001810182559083529120016108338482612a3e565b6001600160a01b03851633148061176c575061176c8533610432565b6117885760405162461bcd60e51b8152600401610507906129a5565b6108338585858585611bb9565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b815183511461184a5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610507565b6001600160a01b0384166118705760405162461bcd60e51b815260040161050790612b42565b3360005b845181101561195757600085828151811061189157611891612b2c565b6020026020010151905060008583815181106118af576118af612b2c565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156118ff5760405162461bcd60e51b815260040161050790612b87565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061193c908490612bd1565b925050819055505050508061195090612b13565b9050611874565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516119a7929190612be4565b60405180910390a46119bd818787878787611ce3565b505050505050565b6001600160a01b038416611a255760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610507565b336000611a3185611e3e565b90506000611a3e85611e3e565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611a70908490612bd1565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ad083600089898989611e89565b50505050505050565b816001600160a01b0316836001600160a01b031603611b4c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610507565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611bdf5760405162461bcd60e51b815260040161050790612b42565b336000611beb85611e3e565b90506000611bf885611e3e565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015611c3b5760405162461bcd60e51b815260040161050790612b87565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611c78908490612bd1565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611cd8848a8a8a8a8a611e89565b505050505050505050565b6001600160a01b0384163b156119bd5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611d279089908990889088908890600401612c09565b6020604051808303816000875af1925050508015611d62575060408051601f3d908101601f19168201909252611d5f91810190612c47565b60015b611e0e57611d6e612c64565b806308c379a003611da75750611d82612c80565b80611d8d5750611da9565b8060405162461bcd60e51b81526004016105079190612127565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610507565b6001600160e01b0319811663bc197c8160e01b14611ad05760405162461bcd60e51b815260040161050790612d09565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611e7857611e78612b2c565b602090810291909101015292915050565b6001600160a01b0384163b156119bd5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611ecd9089908990889088908890600401612d51565b6020604051808303816000875af1925050508015611f08575060408051601f3d908101601f19168201909252611f0591810190612c47565b60015b611f1457611d6e612c64565b6001600160e01b0319811663f23a6e6160e01b14611ad05760405162461bcd60e51b815260040161050790612d09565b828054828255906000526020600020908101928215611f8a579160200282015b82811115611f8a5782518290611f7a9082612a3e565b5091602001919060010190611f64565b50611f96929150611fd9565b5090565b6040518060c001604052806000815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081525090565b80821115611f96576000611fed8282611ff6565b50600101611fd9565b50805461200290612971565b6000825580601f10612012575050565b601f0160209004906000526020600020908101906120309190612033565b50565b5b80821115611f965760008155600101612034565b80356001600160a01b038116811461205f57600080fd5b919050565b6000806040838503121561207757600080fd5b61208083612048565b946020939093013593505050565b6001600160e01b03198116811461203057600080fd5b6000602082840312156120b657600080fd5b81356120c18161208e565b9392505050565b6000602082840312156120da57600080fd5b5035919050565b6000815180845260005b81811015612107576020818501810151868301820152016120eb565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006120c160208301846120e1565b8581526001600160a01b038516602082015260a060408201819052600090612164908301866120e1565b828103606084015261217681866120e1565b9050828103608084015261218a81856120e1565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156121d1576121d1612196565b6040525050565b60006001600160401b038211156121f1576121f1612196565b5060051b60200190565b600082601f83011261220c57600080fd5b81356020612219826121d8565b60405161222682826121ac565b83815260059390931b850182019282810191508684111561224657600080fd5b8286015b84811015612261578035835291830191830161224a565b509695505050505050565b600082601f83011261227d57600080fd5b81356001600160401b0381111561229657612296612196565b6040516122ad601f8301601f1916602001826121ac565b8181528460208386010111156122c257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156122f757600080fd5b61230086612048565b945061230e60208701612048565b935060408601356001600160401b038082111561232a57600080fd5b61233689838a016121fb565b9450606088013591508082111561234c57600080fd5b61235889838a016121fb565b9350608088013591508082111561236e57600080fd5b5061237b8882890161226c565b9150509295509295909350565b6000806000806080858703121561239e57600080fd5b84356001600160401b03808211156123b557600080fd5b6123c18883890161226c565b955060208701359150808211156123d757600080fd5b6123e38883890161226c565b945060408701359350606087013591508082111561240057600080fd5b5061240d8782880161226c565b91505092959194509250565b6000806000806080858703121561242f57600080fd5b84356001600160401b038082111561244657600080fd5b6124528883890161226c565b955060209150818701358181111561246957600080fd5b61247589828a0161226c565b95505060408701358181111561248a57600080fd5b8701601f8101891361249b57600080fd5b80356124a6816121d8565b6040516124b382826121ac565b82815260059290921b830185019185810191508b8311156124d357600080fd5b8584015b8381101561250b578035868111156124ef5760008081fd5b6124fd8e898389010161226c565b8452509186019186016124d7565b509650505050606087013591508082111561240057600080fd5b6000806040838503121561253857600080fd5b82356001600160401b038082111561254f57600080fd5b818501915085601f83011261256357600080fd5b81356020612570826121d8565b60405161257d82826121ac565b83815260059390931b850182019282810191508984111561259d57600080fd5b948201945b838610156125c2576125b386612048565b825294820194908201906125a2565b965050860135925050808211156125d857600080fd5b506125e5858286016121fb565b9150509250929050565b600081518084526020808501945080840160005b8381101561261f57815187529582019590820190600101612603565b509495945050505050565b6020815260006120c160208301846125ef565b6000806040838503121561265057600080fd5b8235915060208301356001600160401b0381111561266d57600080fd5b6125e58582860161226c565b600081518084526020808501808196508360051b8101915082860160005b858110156126c15782840389526126af8483516120e1565b98850198935090840190600101612697565b5091979650505050505050565b8051825260018060a01b0360208201511660208301526000604082015160c060408501526126ff60c08501826120e1565b90506060830151848203606086015261271882826120e1565b915050608083015184820360808601526127328282612679565b91505060a083015184820360a086015261274c82826120e1565b95945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156127aa57603f198886030184526127988583516126ce565b9450928501929085019060010161277c565b5092979650505050505050565b600080604083850312156127ca57600080fd5b6127d383612048565b9150602083013580151581146127e857600080fd5b809150509250929050565b60006020828403121561280557600080fd5b81356001600160401b0381111561281b57600080fd5b6128278482850161226c565b949350505050565b60006020828403121561284157600080fd5b6120c182612048565b831515815260606020820152600061286560608301856120e1565b828103604084015261287781856120e1565b9695505050505050565b60408152600061289460408301856126ce565b828103602084015261274c8185612679565b600080600080608085870312156128bc57600080fd5b8435935060208501356001600160401b03808211156123d757600080fd5b600080604083850312156128ed57600080fd5b6128f683612048565b915061290460208401612048565b90509250929050565b600080600080600060a0868803121561292557600080fd5b61292e86612048565b945061293c60208701612048565b9350604086013592506060860135915060808601356001600160401b0381111561296557600080fd5b61237b8882890161226c565b600181811c9082168061298557607f821691505b6020821081036110dc57634e487b7160e01b600052602260045260246000fd5b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b601f821115612a3957600081815260208120601f850160051c81016020861015612a1a5750805b601f850160051c820191505b818110156119bd57828155600101612a26565b505050565b81516001600160401b03811115612a5757612a57612196565b612a6b81612a658454612971565b846129f3565b602080601f831160018114612aa05760008415612a885750858301515b600019600386901b1c1916600185901b1785556119bd565b600085815260208120601f198616915b82811015612acf57888601518255948401946001909101908401612ab0565b5085821015612aed5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201612b2557612b25612afd565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b8082018082111561053357610533612afd565b604081526000612bf760408301856125ef565b828103602084015261274c81856125ef565b6001600160a01b0386811682528516602082015260a060408201819052600090612c35908301866125ef565b828103606084015261217681866125ef565b600060208284031215612c5957600080fd5b81516120c18161208e565b600060033d1115612c7d5760046000803e5060005160e01c5b90565b600060443d1015612c8e5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612cbd57505050505090565b8285019150815181811115612cd55750505050505090565b843d8701016020828501011115612cef5750505050505090565b612cfe602082860101876121ac565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612d8b908301846120e1565b97965050505050505056fea264697066735822122027945ed8fb302bfc79894d65a853af2beff04f3aec700fce9127da2311984b8564736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101295760003560e01c806380d03829116100ab578063bee5cdca1161006f578063bee5cdca14610399578063bf60db3b146103c7578063c3c5a547146103e7578063e985e9c514610417578063f242432a14610460578063fa5408011461048057600080fd5b806380d03829146102b157806397aba7f9146102d3578063a22cb4651461030b578063a7bb58031461032b578063a87430ba1461036a57600080fd5b8063401eaf73116100f2578063401eaf7314610211578063414aea43146102315780634e1273f4146102445780636c8b703f146102715780637fcacc0e1461029157600080fd5b8062fdd58e1461012e57806301ffc9a7146101615780630e89341c14610191578063107046bd146101be5780632eb2c2d6146101ef575b600080fd5b34801561013a57600080fd5b5061014e610149366004612064565b6104a0565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c3660046120a4565b610539565b6040519015158152602001610158565b34801561019d57600080fd5b506101b16101ac3660046120c8565b610589565b6040516101589190612127565b3480156101ca57600080fd5b506101de6101d93660046120c8565b61061d565b60405161015895949392919061213a565b3480156101fb57600080fd5b5061020f61020a3660046122df565b6107ee565b005b34801561021d57600080fd5b5061020f61022c366004612388565b61083a565b61020f61023f366004612419565b610969565b34801561025057600080fd5b5061026461025f366004612525565b610af3565b604051610158919061262a565b34801561027d57600080fd5b506101b161028c3660046120c8565b610c1c565b34801561029d57600080fd5b506101816102ac36600461263d565b610cb6565b3480156102bd57600080fd5b506102c6610d3b565b6040516101589190612755565b3480156102df57600080fd5b506102f36102ee36600461263d565b6110e2565b6040516001600160a01b039091168152602001610158565b34801561031757600080fd5b5061020f6103263660046127b7565b611161565b34801561033757600080fd5b5061034b6103463660046127f3565b611170565b6040805160ff9094168452602084019290925290820152606001610158565b34801561037657600080fd5b5061038a61038536600461282f565b6111e2565b6040516101589392919061284a565b3480156103a557600080fd5b506103b96103b43660046120c8565b611319565b604051610158929190612881565b3480156103d357600080fd5b5061020f6103e23660046128a6565b6115fb565b3480156103f357600080fd5b5061018161040236600461282f565b60066020526000908152604090205460ff1681565b34801561042357600080fd5b506101816104323660046128da565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561046c57600080fd5b5061020f61047b36600461290d565b611750565b34801561048c57600080fd5b5061014e61049b3660046120c8565b611795565b60006001600160a01b0383166105105760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061056a57506001600160e01b031982166303a24d0760e21b145b8061053357506301ffc9a760e01b6001600160e01b0319831614610533565b60606002805461059890612971565b80601f01602080910402602001604051908101604052809291908181526020018280546105c490612971565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b50505050509050919050565b60076020526000908152604090208054600182015460028301805492936001600160a01b039092169261064f90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461067b90612971565b80156106c85780601f1061069d576101008083540402835291602001916106c8565b820191906000526020600020905b8154815290600101906020018083116106ab57829003601f168201915b5050505050908060030180546106dd90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461070990612971565b80156107565780601f1061072b57610100808354040283529160200191610756565b820191906000526020600020905b81548152906001019060200180831161073957829003601f168201915b50505050509080600501805461076b90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461079790612971565b80156107e45780601f106107b9576101008083540402835291602001916107e4565b820191906000526020600020905b8154815290600101906020018083116107c757829003601f168201915b5050505050905085565b6001600160a01b03851633148061080a575061080a8533610432565b6108265760405162461bcd60e51b8152600401610507906129a5565b61083385858585856117e8565b5050505050565b3360009081526006602052604090205460ff161561089a5760405162461bcd60e51b815260206004820152601d60248201527f506c6179657220697320616c726561647920726567697374657265642e0000006044820152606401610507565b6108a48282610cb6565b6108e55760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642054786e20536f7572636560701b6044820152606401610507565b604080516060810182526001808252602080830188815283850188905233600090815260059092529390208251815460ff19169015151781559251919291908201906109319082612a3e565b50604082015160028201906109469082612a3e565b5050336000908152600660205260409020805460ff191660011790555050505050565b3360009081526006602052604090205460ff166109d85760405162461bcd60e51b815260206004820152602760248201527f4f6e6c7920726567697374657265642075736572732063616e206372656174206044820152661c1c9bda9958dd60ca1b6064820152608401610507565b6040805160c081018252600854808252336020808401918252838501898152606085018990526080850188905260a0850187905260009384526007909152939091208251815590516001820180546001600160a01b0319166001600160a01b0390921691909117905591519091906002820190610a559082612a3e565b5060608201516003820190610a6a9082612a3e565b5060808201518051610a86916004840191602090910190611f44565b5060a08201516005820190610a9b9082612a3e565b50905050610abe336008546103e8604051806020016040528060008152506119c5565b6008546000908152600460205260409020610ad98282612a3e565b50600860008154610ae990612b13565b9091555050505050565b60608151835114610b585760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610507565b600083516001600160401b03811115610b7357610b73612196565b604051908082528060200260200182016040528015610b9c578160200160208202803683370190505b50905060005b8451811015610c1457610be7858281518110610bc057610bc0612b2c565b6020026020010151858381518110610bda57610bda612b2c565b60200260200101516104a0565b828281518110610bf957610bf9612b2c565b6020908102919091010152610c0d81612b13565b9050610ba2565b509392505050565b60046020526000908152604090208054610c3590612971565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6190612971565b8015610cae5780601f10610c8357610100808354040283529160200191610cae565b820191906000526020600020905b815481529060010190602001808311610c9157829003601f168201915b505050505081565b600080610cc284611795565b90506000610cd082856110e2565b6003549091506001600160a01b03808316911614610d305760405162461bcd60e51b815260206004820152601a60248201527f556e617574686f72697a656420436f6e74726163742063616c6c0000000000006044820152606401610507565b506001949350505050565b6060600854600003610d7e576040805160008082526020820190925290610d78565b610d65611f9a565b815260200190600190039081610d5d5790505b50905090565b60006008546001600160401b03811115610d9a57610d9a612196565b604051908082528060200260200182016040528015610dd357816020015b610dc0611f9a565b815260200190600190039081610db85790505b50905060005b6008548110156110dc57600081815260076020908152604091829020825160c0810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191610e2d90612971565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5990612971565b8015610ea65780601f10610e7b57610100808354040283529160200191610ea6565b820191906000526020600020905b815481529060010190602001808311610e8957829003601f168201915b50505050508152602001600382018054610ebf90612971565b80601f0160208091040260200160405190810160405280929190818152602001828054610eeb90612971565b8015610f385780601f10610f0d57610100808354040283529160200191610f38565b820191906000526020600020905b815481529060010190602001808311610f1b57829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015611012578382906000526020600020018054610f8590612971565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb190612971565b8015610ffe5780601f10610fd357610100808354040283529160200191610ffe565b820191906000526020600020905b815481529060010190602001808311610fe157829003601f168201915b505050505081526020019060010190610f66565b50505050815260200160058201805461102a90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461105690612971565b80156110a35780601f10611078576101008083540402835291602001916110a3565b820191906000526020600020905b81548152906001019060200180831161108657829003601f168201915b5050505050815250508282815181106110be576110be612b2c565b602002602001018190525080806110d490612b13565b915050610dd9565b50919050565b6000806000806110f185611170565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa15801561114c573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b61116c338383611ad9565b5050565b600080600083516041146111c65760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610507565b5050506020810151604082015160609092015160001a92909190565b6005602052600090815260409020805460018201805460ff909216929161120890612971565b80601f016020809104026020016040519081016040528092919081815260200182805461123490612971565b80156112815780601f1061125657610100808354040283529160200191611281565b820191906000526020600020905b81548152906001019060200180831161126457829003601f168201915b50505050509080600201805461129690612971565b80601f01602080910402602001604051908101604052809291908181526020018280546112c290612971565b801561130f5780601f106112e45761010080835404028352916020019161130f565b820191906000526020600020905b8154815290600101906020018083116112f257829003601f168201915b5050505050905083565b611321611f9a565b6000828152600760209081526040808320815160c0810183528154815260018201546001600160a01b03169381019390935260028101805460609594938401919061136b90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461139790612971565b80156113e45780601f106113b9576101008083540402835291602001916113e4565b820191906000526020600020905b8154815290600101906020018083116113c757829003601f168201915b505050505081526020016003820180546113fd90612971565b80601f016020809104026020016040519081016040528092919081815260200182805461142990612971565b80156114765780601f1061144b57610100808354040283529160200191611476565b820191906000526020600020905b81548152906001019060200180831161145957829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156115505783829060005260206000200180546114c390612971565b80601f01602080910402602001604051908101604052809291908181526020018280546114ef90612971565b801561153c5780601f106115115761010080835404028352916020019161153c565b820191906000526020600020905b81548152906001019060200180831161151f57829003601f168201915b5050505050815260200190600101906114a4565b50505050815260200160058201805461156890612971565b80601f016020809104026020016040519081016040528092919081815260200182805461159490612971565b80156115e15780601f106115b6576101008083540402835291602001916115e1565b820191906000526020600020905b8154815290600101906020018083116115c457829003601f168201915b505050919092525050506080810151909590945092505050565b3360009081526006602052604090205460ff166116655760405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920726567697374657265642075736572732063616e20616464207461604482015261677360f01b6064820152608401610507565b61166f8282610cb6565b6116b05760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642054786e20536f7572636560701b6044820152606401610507565b600084815260076020526040902060040154600610156117255760405162461bcd60e51b815260206004820152602a60248201527f4d6178696d756d206f66203620746167732061726520616c6c6f7765642070656044820152693910383937b532b1ba1760b11b6064820152608401610507565b6000848152600760209081526040822060040180546001810182559083529120016108338482612a3e565b6001600160a01b03851633148061176c575061176c8533610432565b6117885760405162461bcd60e51b8152600401610507906129a5565b6108338585858585611bb9565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b815183511461184a5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610507565b6001600160a01b0384166118705760405162461bcd60e51b815260040161050790612b42565b3360005b845181101561195757600085828151811061189157611891612b2c565b6020026020010151905060008583815181106118af576118af612b2c565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156118ff5760405162461bcd60e51b815260040161050790612b87565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061193c908490612bd1565b925050819055505050508061195090612b13565b9050611874565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516119a7929190612be4565b60405180910390a46119bd818787878787611ce3565b505050505050565b6001600160a01b038416611a255760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610507565b336000611a3185611e3e565b90506000611a3e85611e3e565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611a70908490612bd1565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611ad083600089898989611e89565b50505050505050565b816001600160a01b0316836001600160a01b031603611b4c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610507565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611bdf5760405162461bcd60e51b815260040161050790612b42565b336000611beb85611e3e565b90506000611bf885611e3e565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015611c3b5760405162461bcd60e51b815260040161050790612b87565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611c78908490612bd1565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611cd8848a8a8a8a8a611e89565b505050505050505050565b6001600160a01b0384163b156119bd5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611d279089908990889088908890600401612c09565b6020604051808303816000875af1925050508015611d62575060408051601f3d908101601f19168201909252611d5f91810190612c47565b60015b611e0e57611d6e612c64565b806308c379a003611da75750611d82612c80565b80611d8d5750611da9565b8060405162461bcd60e51b81526004016105079190612127565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610507565b6001600160e01b0319811663bc197c8160e01b14611ad05760405162461bcd60e51b815260040161050790612d09565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611e7857611e78612b2c565b602090810291909101015292915050565b6001600160a01b0384163b156119bd5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611ecd9089908990889088908890600401612d51565b6020604051808303816000875af1925050508015611f08575060408051601f3d908101601f19168201909252611f0591810190612c47565b60015b611f1457611d6e612c64565b6001600160e01b0319811663f23a6e6160e01b14611ad05760405162461bcd60e51b815260040161050790612d09565b828054828255906000526020600020908101928215611f8a579160200282015b82811115611f8a5782518290611f7a9082612a3e565b5091602001919060010190611f64565b50611f96929150611fd9565b5090565b6040518060c001604052806000815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081525090565b80821115611f96576000611fed8282611ff6565b50600101611fd9565b50805461200290612971565b6000825580601f10612012575050565b601f0160209004906000526020600020908101906120309190612033565b50565b5b80821115611f965760008155600101612034565b80356001600160a01b038116811461205f57600080fd5b919050565b6000806040838503121561207757600080fd5b61208083612048565b946020939093013593505050565b6001600160e01b03198116811461203057600080fd5b6000602082840312156120b657600080fd5b81356120c18161208e565b9392505050565b6000602082840312156120da57600080fd5b5035919050565b6000815180845260005b81811015612107576020818501810151868301820152016120eb565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006120c160208301846120e1565b8581526001600160a01b038516602082015260a060408201819052600090612164908301866120e1565b828103606084015261217681866120e1565b9050828103608084015261218a81856120e1565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156121d1576121d1612196565b6040525050565b60006001600160401b038211156121f1576121f1612196565b5060051b60200190565b600082601f83011261220c57600080fd5b81356020612219826121d8565b60405161222682826121ac565b83815260059390931b850182019282810191508684111561224657600080fd5b8286015b84811015612261578035835291830191830161224a565b509695505050505050565b600082601f83011261227d57600080fd5b81356001600160401b0381111561229657612296612196565b6040516122ad601f8301601f1916602001826121ac565b8181528460208386010111156122c257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156122f757600080fd5b61230086612048565b945061230e60208701612048565b935060408601356001600160401b038082111561232a57600080fd5b61233689838a016121fb565b9450606088013591508082111561234c57600080fd5b61235889838a016121fb565b9350608088013591508082111561236e57600080fd5b5061237b8882890161226c565b9150509295509295909350565b6000806000806080858703121561239e57600080fd5b84356001600160401b03808211156123b557600080fd5b6123c18883890161226c565b955060208701359150808211156123d757600080fd5b6123e38883890161226c565b945060408701359350606087013591508082111561240057600080fd5b5061240d8782880161226c565b91505092959194509250565b6000806000806080858703121561242f57600080fd5b84356001600160401b038082111561244657600080fd5b6124528883890161226c565b955060209150818701358181111561246957600080fd5b61247589828a0161226c565b95505060408701358181111561248a57600080fd5b8701601f8101891361249b57600080fd5b80356124a6816121d8565b6040516124b382826121ac565b82815260059290921b830185019185810191508b8311156124d357600080fd5b8584015b8381101561250b578035868111156124ef5760008081fd5b6124fd8e898389010161226c565b8452509186019186016124d7565b509650505050606087013591508082111561240057600080fd5b6000806040838503121561253857600080fd5b82356001600160401b038082111561254f57600080fd5b818501915085601f83011261256357600080fd5b81356020612570826121d8565b60405161257d82826121ac565b83815260059390931b850182019282810191508984111561259d57600080fd5b948201945b838610156125c2576125b386612048565b825294820194908201906125a2565b965050860135925050808211156125d857600080fd5b506125e5858286016121fb565b9150509250929050565b600081518084526020808501945080840160005b8381101561261f57815187529582019590820190600101612603565b509495945050505050565b6020815260006120c160208301846125ef565b6000806040838503121561265057600080fd5b8235915060208301356001600160401b0381111561266d57600080fd5b6125e58582860161226c565b600081518084526020808501808196508360051b8101915082860160005b858110156126c15782840389526126af8483516120e1565b98850198935090840190600101612697565b5091979650505050505050565b8051825260018060a01b0360208201511660208301526000604082015160c060408501526126ff60c08501826120e1565b90506060830151848203606086015261271882826120e1565b915050608083015184820360808601526127328282612679565b91505060a083015184820360a086015261274c82826120e1565b95945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156127aa57603f198886030184526127988583516126ce565b9450928501929085019060010161277c565b5092979650505050505050565b600080604083850312156127ca57600080fd5b6127d383612048565b9150602083013580151581146127e857600080fd5b809150509250929050565b60006020828403121561280557600080fd5b81356001600160401b0381111561281b57600080fd5b6128278482850161226c565b949350505050565b60006020828403121561284157600080fd5b6120c182612048565b831515815260606020820152600061286560608301856120e1565b828103604084015261287781856120e1565b9695505050505050565b60408152600061289460408301856126ce565b828103602084015261274c8185612679565b600080600080608085870312156128bc57600080fd5b8435935060208501356001600160401b03808211156123d757600080fd5b600080604083850312156128ed57600080fd5b6128f683612048565b915061290460208401612048565b90509250929050565b600080600080600060a0868803121561292557600080fd5b61292e86612048565b945061293c60208701612048565b9350604086013592506060860135915060808601356001600160401b0381111561296557600080fd5b61237b8882890161226c565b600181811c9082168061298557607f821691505b6020821081036110dc57634e487b7160e01b600052602260045260246000fd5b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b601f821115612a3957600081815260208120601f850160051c81016020861015612a1a5750805b601f850160051c820191505b818110156119bd57828155600101612a26565b505050565b81516001600160401b03811115612a5757612a57612196565b612a6b81612a658454612971565b846129f3565b602080601f831160018114612aa05760008415612a885750858301515b600019600386901b1c1916600185901b1785556119bd565b600085815260208120601f198616915b82811015612acf57888601518255948401946001909101908401612ab0565b5085821015612aed5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201612b2557612b25612afd565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b8082018082111561053357610533612afd565b604081526000612bf760408301856125ef565b828103602084015261274c81856125ef565b6001600160a01b0386811682528516602082015260a060408201819052600090612c35908301866125ef565b828103606084015261217681866125ef565b600060208284031215612c5957600080fd5b81516120c18161208e565b600060033d1115612c7d5760046000803e5060005160e01c5b90565b600060443d1015612c8e5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612cbd57505050505090565b8285019150815181811115612cd55750505050505090565b843d8701016020828501011115612cef5750505050505090565b612cfe602082860101876121ac565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612d8b908301846120e1565b97965050505050505056fea264697066735822122027945ed8fb302bfc79894d65a853af2beff04f3aec700fce9127da2311984b8564736f6c63430008140033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/EBF.sol:EBF",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 31,
        "contract": "contracts/EBF.sol:EBF",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 33,
        "contract": "contracts/EBF.sol:EBF",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2157,
        "contract": "contracts/EBF.sol:EBF",
        "label": "deployer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2161,
        "contract": "contracts/EBF.sol:EBF",
        "label": "tokenURIs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2166,
        "contract": "contracts/EBF.sol:EBF",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(User)2185_storage)"
      },
      {
        "astId": 2170,
        "contract": "contracts/EBF.sol:EBF",
        "label": "isRegistered",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2175,
        "contract": "contracts/EBF.sol:EBF",
        "label": "projects",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Project)2199_storage)"
      },
      {
        "astId": 1800,
        "contract": "contracts/EBF.sol:EBF",
        "label": "projectCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(User)2185_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Structs.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)2185_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Project)2199_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Structs.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)2199_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Project)2199_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Project",
        "members": [
          {
            "astId": 2187,
            "contract": "contracts/EBF.sol:EBF",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2189,
            "contract": "contracts/EBF.sol:EBF",
            "label": "registeredBy",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2191,
            "contract": "contracts/EBF.sol:EBF",
            "label": "projectName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2193,
            "contract": "contracts/EBF.sol:EBF",
            "label": "projectDescription",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2196,
            "contract": "contracts/EBF.sol:EBF",
            "label": "tags",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 2198,
            "contract": "contracts/EBF.sol:EBF",
            "label": "ipfsURI",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(User)2185_storage": {
        "encoding": "inplace",
        "label": "struct Structs.User",
        "members": [
          {
            "astId": 2180,
            "contract": "contracts/EBF.sol:EBF",
            "label": "isVerified",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2182,
            "contract": "contracts/EBF.sol:EBF",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2184,
            "contract": "contracts/EBF.sol:EBF",
            "label": "hometown",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}